#!/usr/bin/env ruby
# Parse the command line arguments
require 'optparse'
excludes = []
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options] [files or directories]"

  opts.separator ""
#  opts.separator "VimMate #{VimMate::VERSION}: Vim graphical add-on"
  opts.separator "Copyright (C) 2006 Guillaume Benny"
  opts.separator ""
  opts.separator "If files or directories are omitted, the current directory is shown"

  opts.on("-x",
          "--exclude file1,file2,file3",
          Array,
          "Comma separated list of files or directory to exclude.") do |list|
    excludes = list
  end

  opts.on_tail('-w', '--no-detach', 'Do not return to the terminal') do
    @do_not_detach = true
  end

  opts.on_tail("-h", "--help", "Show this help screen") do |string|
    puts opts
    exit
  end
end.parse!


# Ignore patterns from .vimmate_ignore
local_ignore_file = File.expand_path('.vimmate_ignore')
if File.exists?(local_ignore_file)
  File.open(local_ignore_file) do |f|
    while line = f.gets 
      line.chomp!.strip!
      excludes << line unless line.empty?
    end
  end
end

starting = lambda do
  require File.expand_path( File.join( File.dirname(__FILE__), '..', 'config', 'environment'  ) )
  Thread.abort_on_exception = true

  class VimMateApp < ActiveWindow::Application
    def initialize(opts={})
      @excludes = opts.delete(:excludes)
      super
    end
    def file_tree
      files.file_tree
    end
    def files
      controller[:file_filter]
    end
    def vim
      controller[:vim].vim
    end
    def add_path(path)
      file_tree.initial_adding do
        file_tree.add_path(path)
      end
    end

    def post_setup
      super

      @excludes.each do |rule|
        file_tree.exclude! rule
      end unless @excludes.blank?

      # If there are no files given, add the current directory to the file list.
      # If files are specified on the command line, use them
      if ARGV.empty?
        add_path(File.expand_path('.'))
        files.expand_first_row
      else
        ARGV.each do |file|
          path = File.expand_path(file)
          add_path(path)
          #window.vim.open(path, :tab)
        end
      end
    end

    def run
      GLib::Timeout.add(23) do
        vim.start
        false
      end
      super
    end
  end

  icon_path = File.join(  File.dirname(__FILE__), '..', 'images', 'vimmate48.png'  )
  Gtk::Window.set_default_icon(icon_path)

  app = VimMateApp.new(:title => 'VimMate', :main_window => 'VimMate', :excludes => excludes)
  app.start


  ## Create the main objects
  #window = VimMate::Window.new

end

if @do_not_detach
  starting.call
else
  fork { starting.call }
end
