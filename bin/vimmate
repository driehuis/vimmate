#!/usr/bin/env ruby
=begin
= VimMate: Vim graphical add-on
Copyright (c) 2006 Guillaume Benny

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
=end


#
# VimMate is a graphical add-on to Vim that was written and
# is Copyright (C) 2006 Guillaume Benny
#
module VimMate
end

require 'rubygems'
require 'activesupport'

# Find the lib directory based on the path of this file
lib_dir = File.join(File.dirname(__FILE__), "../lib")
vimmate_lib_dir = File.join(lib_dir, "vimmatelib")
# Add the lib directory in Ruby's search path
$:.unshift(lib_dir) if File.directory? lib_dir
$:.unshift(vimmate_lib_dir) if File.directory? vimmate_lib_dir

require 'try'
# Require the version
require 'vimmatelib/version'

# Parse the command line arguments
require 'optparse'
exclude_file_list = []
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options] [files or directories]"

  opts.separator ""
  opts.separator "VimMate #{VimMate::VERSION}: Vim graphical add-on"
  opts.separator "Copyright (C) 2006 Guillaume Benny"
  opts.separator ""
  opts.separator "If files or directories are omitted, the current directory is shown"

  opts.on("-x",
          "--exclude file1,file2,file3",
          Array,
          "Comma separated list of files or directory to exclude.") do |file_list|
    exclude_file_list = file_list
  end

  opts.on_tail("-h", "--help", "Show this help screen") do |string|
    puts opts
    exit
  end
end.parse!


# We fork to give back the shell to the user, like Vim
fork do
  require 'vimmatelib/requirer'

  VimMate::Requirer.require_exit('gtk2')
  VimMate::Requirer.require_exit('libglade2')
  require 'config'
  require 'dummy_window'
  require 'files_menu'
  require 'icons'
  require 'search_window'
  #require 'vimmatelib/file_tree_view'
  require 'file_tree_controller'
  require 'signals'
  require 'plugins'
  require 'main_window'
  require 'vim/integration'
  require 'vim_window'
  require 'tags_window'
  require 'search_window'
  require 'config_window'
require 'gtk_thread_helper'

  # Create the main objects
  main = VimMate::MainWindow.new
  file_tree = VimMate::FileTreeController.new(:exclude => exclude_file_list)
  main.tree_scroller.add(file_tree.view)

  vim = VimMate::VimWindow.new
  main.main_pane.pack2(vim.gtk_window, true, false) if vim

  tag_tree = VimMate::TagsWindow.new(vim)
  main.tags_scroller.add tag_tree.gtk_window

  #search_window = VimMate::SearchWindow.new(file_tree)
  #main.list_scroller.add search_window.gtk_window

  #menu = VimMate::FilesMenu.new(main)
  
#  terminals = VimMate::Requirer.require_if('vimmatelib/terminals_window', VimMate::DummyWindow.new) do
#    VimMate::TerminalsWindow.new
#  end

  # Set the signals for the file list
#  file_tree.view.add_open_signal do |path, kind|
#    vim.open(path, kind)
#  end
#  file_tree.add_menu_signal do |path|
#    menu.open(path)
#  end
#
  # Set the signals for the file menu
#  menu.add_open_signal do |path, kind|
#    vim.open(path, kind)
#  end
#  menu.add_refresh_signal do
#    files.refresh
#  end
#
  # If there are no files given, add the current directory to the file list.
  # If files are specified on the command line, use them
  if ARGV.empty?
    file_tree.add_path(File.expand_path('.'))
    file_tree.expand_first_row
  else
    ARGV.each do |file|
      file_tree.add_path(File.expand_path(file))
    end
  end


# React when the file list is expanded or closed
#  previous_separator_position = VimMate::Config[:files_opened_width]
#  files.add_expander_signal do |expanded|
#    if expanded
#      gtk_file_expander.position = previous_separator_position
#    else
#      previous_separator_position = gtk_file_expander.position
#      gtk_file_expander.position = VimMate::Config[:files_closed_width]
#    end
#  end
#  unless VimMate::Config[:files_expanded]
#    gtk_file_expander.position = VimMate::Config[:files_closed_width]
#  end

  # Go!
  main.start(vim)
end

